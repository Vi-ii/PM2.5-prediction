import aiohttp  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å HTTP-–∑–∞–ø—Ä–æ—Å–∞–º–∏
import asyncio  # –ú–æ–¥—É–ª—å –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
from aiogram import Bot, Dispatcher, types  # –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram API
from aiogram.types import Message  # –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏–π Telegram
from aiogram.filters import Command  # –§–∏–ª—å—Ç—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (—Å–∫—Ä—ã—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
TOKEN = "***************************"

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()


async def get_coordinates(city):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–∞ —á–µ—Ä–µ–∑ OpenStreetMap Nominatim.

    :param city: –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
    :return: –ö–æ—Ä—Ç–µ–∂ —Å —à–∏—Ä–æ—Ç–æ–π, –¥–æ–ª–≥–æ—Ç–æ–π –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ None, –µ—Å–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω
    """
    url = f"https://nominatim.openstreetmap.org/search?q={city}&format=json"
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            data = await response.json()
            if data:
                return float(data[0]["lat"]), float(data[0]["lon"]), data[0]["name"]
            return None


async def get_weather(lat, lon):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É —á–µ—Ä–µ–∑ Open-Meteo.

    :param lat: –®–∏—Ä–æ—Ç–∞
    :param lon: –î–æ–ª–≥–æ—Ç–∞
    :return: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥–µ –∏–ª–∏ None, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
    """
    url = f"https://api.open-meteo.com/v1/forecast?latitude={lat}&longitude={lon}&current_weather=true"
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            data = await response.json()
            return data["current_weather"] if "current_weather" in data else None


async def get_quality(lat, lon):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞ (AQI –∏ PM2.5) —á–µ—Ä–µ–∑ IQAir.

    :param lat: –®–∏—Ä–æ—Ç–∞
    :param lon: –î–æ–ª–≥–æ—Ç–∞
    :return: –ö–æ—Ä—Ç–µ–∂ —Å PM2.5, –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω—ã–º –¥–∞–≤–ª–µ–Ω–∏–µ–º –∏ –≤–ª–∞–∂–Ω–æ—Å—Ç—å—é –∏–ª–∏ None, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
    """
    api_key = "*********************************"

    def aqi_to_pm25(aqi):
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ AQI –≤ PM2.5 –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ.

        :param aqi: –ò–Ω–¥–µ–∫—Å –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–∑–¥—É—Ö–∞ (AQI)
        :return: –ó–Ω–∞—á–µ–Ω–∏–µ PM2.5
        """
        aqi_ranges = [
            (0, 50, 0.0, 9.0),  # –û—Ç–ª–∏—á–Ω–æ–µ
            (51, 100, 9.1, 35.4),  # –•–æ—Ä–æ—à–µ–µ
            (101, 150, 35.5, 55.4),  # –£–º–µ—Ä–µ–Ω–Ω–æ–µ
            (151, 200, 55.5, 125.4),  # –í—Ä–µ–¥–Ω–æ–µ –¥–ª—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –≥—Ä—É–ø–ø
            (201, 300, 125.5, 225.4),  # –í—Ä–µ–¥–Ω–æ–µ
            (301, 400, 225.5, 350.4),  # –û—á–µ–Ω—å –≤—Ä–µ–¥–Ω–æ–µ
            (401, 500, 350.5, 500.4)  # –û–ø–∞—Å–Ω–æ–µ
        ]
        for low_aqi, high_aqi, low_pm25, high_pm25 in aqi_ranges:
            if low_aqi <= aqi <= high_aqi:
                pm2_5 = low_pm25 + ((aqi - low_aqi) / (high_aqi - low_aqi)) * (high_pm25 - low_pm25)
                return round(pm2_5, 2)

    url = f'https://api.airvisual.com/v2/nearest_city?lat={lat}&lon={lon}&key={api_key}'
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            try:
                data = await response.json()
                pm2_5 = aqi_to_pm25(data['data']['current']['pollution']['aqius'])
                pr = data['data']['current']['weather']['pr']  # –ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ
                hu = data['data']['current']['weather']['hu']  # –í–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞
            except:
                return None
            return pm2_5, pr, hu


async def get_elevation(lat, lon):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤—ã—Å–æ—Ç—É –Ω–∞–¥ —É—Ä–æ–≤–Ω–µ–º –º–æ—Ä—è —á–µ—Ä–µ–∑ Open-Elevation.

    :param lat: –®–∏—Ä–æ—Ç–∞
    :param lon: –î–æ–ª–≥–æ—Ç–∞
    :return: –í—ã—Å–æ—Ç–∞ –Ω–∞–¥ —É—Ä–æ–≤–Ω–µ–º –º–æ—Ä—è –∏–ª–∏ None, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
    """
    url = f"https://api.open-elevation.com/api/v1/lookup?locations={lat},{lon}"
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            data = await response.json()
            return data["results"][0]["elevation"] if "results" in data else None


@dp.message(Command("start"))
async def start(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –∏ —è —Å–∫–∞–∂—É, –∫–∞–∫–∞—è —Ç–∞–º –ø–æ–≥–æ–¥–∞ ‚òÄÔ∏èüåßÔ∏è‚ùÑÔ∏è")


@dp.message()
async def weather_request(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π. –ò—â–µ—Ç –≥–æ—Ä–æ–¥, –ø–æ–ª—É—á–∞–µ—Ç –ø–æ–≥–æ–¥—É –∏ –∫–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞, –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    city = message.text.strip()  # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    coordinates = await get_coordinates(city)
    if not coordinates:
        await message.answer("–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —ç—Ç–æ—Ç –≥–æ—Ä–æ–¥. –ü—Ä–æ–≤–µ—Ä—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞! üòï")
        return

    lat, lon, found_location = coordinates
    weather = await get_weather(lat, lon)
    pm2_5_data = await get_quality(lat, lon)
    if not pm2_5_data:
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∫–∞—á–µ—Å—Ç–≤–µ –≤–æ–∑–¥—É—Ö–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ –≤ —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ –Ω–µ—Ç –¥–∞—Ç—á–∏–∫–æ–≤! üòï")
        return

    pm2_5, pr, hu = pm2_5_data
    elevation = await get_elevation(lat, lon)
    if not weather:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ! ü§î")
        return

    # –û—Ü–µ–Ω–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –∑–∞–≥—Ä—è–∑–Ω—ë–Ω–Ω–æ—Å—Ç–∏ PM2.5
    if pm2_5 < 12:
        pollution_status = "üü¢ –ß–∏—Å—Ç—ã–π –≤–æ–∑–¥—É—Ö"
    elif pm2_5 < 35:
        pollution_status = "üü° –ù–µ–º–Ω–æ–≥–æ –∑–∞–≥—Ä—è–∑–Ω—ë–Ω–Ω—ã–π"
    elif pm2_5 < 55:
        pollution_status = "üü† –ó–∞–≥—Ä—è–∑–Ω—ë–Ω–Ω—ã–π, —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º –ª—é–¥—è–º –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ!"
    elif pm2_5 < 150:
        pollution_status = "üî¥ –í—Ä–µ–¥–Ω—ã–π, –ª—É—á—à–µ –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç—å –±–µ–∑ –º–∞—Å–∫–∏!"
    else:
        pollution_status = "‚ò†Ô∏è –û—á–µ–Ω—å –≤—Ä–µ–¥–Ω—ã–π, –æ—Å—Ç–∞–≤–∞–π—Å—è –¥–æ–º–∞!"

    response_text = (
        f"üåç –ü–æ–≥–æ–¥–∞ –≤ {found_location}:\n"
        f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather['temperature']}¬∞C\n"
        f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {hu}%\n"
        f"üí® –í–µ—Ç–µ—Ä: {weather['windspeed']} –∫–º/—á\n"
        f"üß≠ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞: {weather['winddirection']}¬∞\n"
        f"üí• –ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ: {pr} –º–º —Ä—Ç. —Å—Ç.\n"
        f"‚õ∞ –í—ã—Å–æ—Ç–∞ –Ω–∞–¥ —É—Ä–æ–≤–Ω–µ–º –º–æ—Ä—è {round(elevation)} –º\n\n"
        f"üå´ PM2.5 –ó–∞–≥—Ä—è–∑–Ω–µ–Ω–∏–µ: {pm2_5} –º–∫–≥/–º¬≥\n"
        f"{pollution_status}"
    )
    await message.answer(response_text)


async def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è. –ó–∞–ø—É—Å–∫–∞–µ—Ç polling –±–æ—Ç–∞.
    """
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())  # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é



'''
get_coordinates(city) : –ò—Å–ø–æ–ª—å–∑—É–µ—Ç API OpenStreetMap –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≥–æ—Ä–æ–¥–∞.
get_weather(lat, lon) : –ò—Å–ø–æ–ª—å–∑—É–µ—Ç API Open-Meteo –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥–µ.
get_quality(lat, lon) : –ò—Å–ø–æ–ª—å–∑—É–µ—Ç API IQAir –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∫–∞—á–µ—Å—Ç–≤–µ –≤–æ–∑–¥—É—Ö–∞ (AQI –∏ PM2.5).
get_elevation(lat, lon) : –ò—Å–ø–æ–ª—å–∑—É–µ—Ç API Open-Elevation –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã—Å–æ—Ç—ã –Ω–∞–¥ —É—Ä–æ–≤–Ω–µ–º –º–æ—Ä—è.
start(message: Message) : –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
weather_request(message: Message) : –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–≥–æ–¥—É –∏ –∫–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞.
main() : –ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ

    –ù–∞–ø–∏—à–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º.

    –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –∏ –±–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –∏ –∫–∞—á–µ—Å—Ç–≤–µ –≤–æ–∑–¥—É—Ö–∞.

–ü—Ä–∏–º–µ—á–∞–Ω–∏—è

    –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ API –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    API-–∫–ª—é—á–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ª—É—á–∏—Ç—å –∏ –∑–∞–º–µ–Ω–∏—Ç—å –≤ –∫–æ–¥–µ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º.

    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –≤—ã—Å–æ–∫—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.
'''